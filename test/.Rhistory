# 95% CI
beta = coef(summary(model1))[2,1]
se = coef(summary(model1))[2,2]
beta + 1.96*c(-se,se)
```
b. Now add the pre-treatment value of Y as a covariate.  Provide a 95% confidence interval for the treatment effect.  Explain how and why this confidence interval differs from the previous one.
**95% CI: $\beta_{1} = [0.092, 0.157]**
**Adding the pre-treatment value of Y to the regression decreased the magnitude and standard error of the estimated treatment effect of receiving bins.  This would mean there is a slight positive correlation between the pre-treatment value of Y and the treatment itself.**
```{r}
# regression - avg bins on bin treatment, pre-treatment avg bins
model2 = lm(avg_bins_treat ~ bin + base_avg_bins_treat, data = d)
summary(model2)
# 95% CI
beta = coef(summary(model2))[2,1]
se = coef(summary(model2))[2,2]
beta + 1.96*c(-se,se)
d$street = factor(d$street)
model3 = lm(avg_bins_treat ~ bins + base_avg_bins_treat + street)
model3 = lm(avg_bins_treat ~ bins + base_avg_bins_treat + street, data = d)
model3 = lm(avg_bins_treat ~ bin + base_avg_bins_treat + street, data = d)
summary(model3)
beta = coef(summary(model3))[2,1]
se = coef(summary(model3))[2,2]
beta + 1.96*c(-se,se)
d$nocell = d$havecell == 1
d$nocell = d$havecell == numeric(1)
d$nocell = d$havecell == as.numeric(1)
d$nocell = d$havecell == int(1)
d$nocell = int(d$havecell == (1))
d$nocell = int(d$havecell == 1)
d$nocell = numeric(d$havecell == 1)
d$nocell = integer(d$havecell == 1))
d$nocell = integer(d$havecell == 1)
d$havecell
d$nocell = integer(d$havecell == 0)
View(d)
d$nocell = d$havecell == 0
d$nocell = integer(d$havecell == 0)
?integer
d$nocell = numeric(d$havecell == 0)
d$nocell = as.integer(d$havecell == 0)
# regression - avg bins on bin treat, pre-treat avg bins, street fixed fx, no cell
model4 = lm(avg_bins_treat ~ bin + base_avg_bins_treat + street + no cell, data = d)
summary(model4)
# 95% CI
beta = coef(summary(model4))[2,1]
se = coef(summary(model4))[2,2]
beta + 1.96*c(-se,se)
d$nocell = 1 - d$havecell
# regression - avg bins on bin treat, pre-treat avg bins, street fixed fx, no cell
model4 = lm(avg_bins_treat ~ bin + base_avg_bins_treat + street + nocell, data = d)
summary(model4)
# 95% CI
beta = coef(summary(model4))[2,1]
se = coef(summary(model4))[2,2]
beta + 1.96*c(-se,se)
library("gdata", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(RCurl)
library(data.table)
# load data
d <- read.csv(text = getURL("https://docs.google.com/spreadsheets/d/1FDJKkBLtuT5vq5A2oLuzqyYGsQwvkTIYy8vuGFL4Mqw/pub?gid=749024198&single=true&output=csv"), stringsAsFactors=F)
```
a. Using regression without clustered standard errors (that is, ignoring the clustered assignment), compute a confidence interval for the effect of the ad on candidate name recognition in Study 1 only (the dependent variable is “name_recall”).
+ **Note**: Ignore the blocking the article mentions throughout this problem.
+ **Note**: You will estimate something different than is reported in the study.
**95% CI $\beta_{1} = [-0.051, 0.031]$**
```{r}
# data from Study 1
d1 = d[d$studyno == 1,]
summary(d1)
d1$cluster = factor(d1$cluster) # see comments in function cl
# regression - name recall on treatment w/ ad
model1 = lm(name_recall ~ treat_ad, data = d1)
summary(model1)
# 95% CI for beta of treatment w/ ad
beta = coef(summary(model1))[2,1]
se = coef(summary(model1))[2,2]
beta + 1.96*c(-se,se)
cl <- function(fm, cluster){
## This function takes a fit model `fm` and a cluster `df$variable`
## and returns the cluster-correct standard errors.
##
## This is really little more than an application of the sandwich
## estimator inside each of the clusters, but it isn't alwasy intuitive
## what is happening.
##
## Adapted from Mahmood Arai & Drew Dimmery
##
## Note: - This WON'T work with missing data; different vector lenghts
##       - I'd strongly recommend that you read your data the first time
##         without converting it to a factor.
##       - Instead, convert it to a factor after you have read-in the
##         data.
require(sandwich, quietly = TRUE)
require(lmtest, quietly = TRUE)
M <- length(unique(cluster))  # of clusters
N <- length(cluster) # sample size
K <- fm$rank # of regression vars
dfc <- (M/(M-1))*((N-1)/(N-K)) # degrees of freedom adjustment
uj <- apply(estfun(fm),2, function(x) tapply(x, cluster, sum));
vcovCL <- dfc*sandwich(fm, meat=crossprod(uj)/N)
coeftest(fm, vcovCL)
}
## Usage:
# my.lm <- lm(y~x, data)  # you’re accustomed to doing this
# cl(my.lm, data$cluster) # cluster is a factor variable in the
# data frame that identifies the clusters
# coeff test w/ model1 and clustered vcov matrix
model1.ctest = cl(model1, d1$cluster)
model1.ctest
# 95% CI w/ same beta, but clustered SE
se.c = model1.ctest[2,2]
beta + 1.96*c(-se.c,se.c)
# data from Study 2
d2 = d[d$studyno == 2,]
summary(d2)
# remove observations w/ NA values
d2 = d2[complete.cases(d2),]
d2$cluster = factor(d2$cluster) # see comments in function cl
# regression - name recall on treatment w/ ad
model2 = lm(name_recall ~ treat_ad, data = d2)
summary(model2)
# coeff test w/ model2 and clustered vcov matrix
model2.ctest = cl(model2, d2$cluster)
model2.ctest
# 95% CI w/ same beta, but clustered SE
beta = coef(summary(model2))[2,1]
se.c = model2.ctest[2,2]
beta + 1.96*c(-se.c,se.c)
# all data
summary(d)
# remove observations w/ NA values
d = d[complete.cases(d),]
d$cluster = factor(d$cluster) # see comments in function cl
# regression - name recall on treatment w/ ad
model3 = lm(name_recall ~ treat_ad, data = d)
summary(model3)
# coeff test w/ model3 and clustered vcov matrix
model3.ctest = cl(model3, d$cluster)
model3.ctest
# 95% CI w/ same beta, but clustered SE
beta = coef(summary(model3))[2,1]
se.c = model3.ctest[2,2]
beta + 1.96*c(-se.c,se.c)
model3.ctest
# create binary var indicating if data from Study 1
d$study1 = d$studyno == 1
# regression - name recall on treatment w/ ad, dummy var for study1
model4 = lm(name_recall ~ treat_ad + study1, data = d)
summary(model4)
# coeff test w/ model4 and clustered vcov matrix
model4.ctest = cl(model4, d$cluster)
model4.ctest
# 95% CI w/ same beta, but clustered SE
beta = coef(summary(model4))[2,1]
se.c = model4.ctest[2,2]
beta + 1.96*c(-se.c,se.c)
.187 + 1.96*c(-.032,.032)
-.024 + 1.96*c(-.039,.039)
.281*2
d <- read.csv(text = getURL("https://docs.google.com/spreadsheets/d/1bnlhwqDjhD5790_323pO420qULb1OFdlypjAFJKTmsM/pub?gid=2024977363&single=true&output=csv"))
d <- d[,-1]
head(d)
# regression - avg bins on bin treatment
model1 = lm(avg_bins_treat ~ bin, data = d)
summary(model1)
# 95% CI
beta = coef(summary(model1))[2,1]
se = coef(summary(model1))[2,2]
beta + 1.96*c(-se,se)
# regression - avg bins on bin treatment, pre-treatment avg bins
model2 = lm(avg_bins_treat ~ bin + base_avg_bins_treat, data = d)
summary(model2)
# 95% CI
beta = coef(summary(model2))[2,1]
se = coef(summary(model2))[2,2]
beta + 1.96*c(-se,se)
d$street = factor(d$street)
# regression - avg bins on bin treat, pre-treat avg bins, street fixed fx
model3 = lm(avg_bins_treat ~ bin + base_avg_bins_treat + street, data = d)
summary(model3)
# 95% CI
beta = coef(summary(model3))[2,1]
se = coef(summary(model3))[2,2]
beta + 1.96*c(-se,se)
dplyr::count(d, street)
x = dplyr::count(d, street)
x
View(x)
summary(d)
d = complete.cases(d)
# regression - avg bins on bin treatment
model1 = lm(avg_bins_treat ~ bin, data = d)
summary(model1)
# 95% CI
beta = coef(summary(model1))[2,1]
se = coef(summary(model1))[2,2]
beta + 1.96*c(-se,se)
# regression - avg bins on bin treatment, pre-treatment avg bins
model2 = lm(avg_bins_treat ~ bin + base_avg_bins_treat, data = d)
summary(model2)
# 95% CI
beta = coef(summary(model2))[2,1]
se = coef(summary(model2))[2,2]
beta + 1.96*c(-se,se)
d = d[complete.cases(d),]
# regression - avg bins on bin treatment
model1 = lm(avg_bins_treat ~ bin, data = d)
summary(model1)
d = d[complete.cases(d),]
d <- read.csv(text = getURL("https://docs.google.com/spreadsheets/d/1bnlhwqDjhD5790_323pO420qULb1OFdlypjAFJKTmsM/pub?gid=2024977363&single=true&output=csv"))
d <- d[,-1]
head(d)
View(d)
model1 = lm(avg_bins_treat ~ bin, data = d)
summary(model1)
# 95% CI
beta = coef(summary(model1))[2,1]
se = coef(summary(model1))[2,2]
beta + 1.96*c(-se,se)
# regression - avg bins on bin treatment, pre-treatment avg bins
model2 = lm(avg_bins_treat ~ bin + base_avg_bins_treat, data = d)
summary(model2)
# 95% CI
beta = coef(summary(model2))[2,1]
se = coef(summary(model2))[2,2]
beta + 1.96*c(-se,se)
d$street = factor(d$street)
# regression - avg bins on bin treat, pre-treat avg bins, street fixed fx
model3 = lm(avg_bins_treat ~ bin + base_avg_bins_treat + street, data = d)
summary(model3)
# 95% CI
beta = coef(summary(model3))[2,1]
se = coef(summary(model3))[2,2]
beta + 1.96*c(-se,se)
se
d$nocell = 1 - d$havecell
# regression - avg bins on bin treat, pre-treat avg bins, street fixed fx, no cell
model4 = lm(avg_bins_treat ~ bin + base_avg_bins_treat + street + nocell, data = d)
summary(model4)
# 95% CI
beta = coef(summary(model4))[2,1]
se = coef(summary(model4))[2,2]
beta + 1.96*c(-se,se)
c(167,160,629)/956
c(132,140,557)/829
# regression - avg bins on bin treat, pre-treat avg bins, street fixed fx, no cell
model4 = lm(avg_bins_treat ~ bin + base_avg_bins_treat + street + nocell, data = d)
summary(model4)
# 95% CI
beta = coef(summary(model4))[2,1]
se = coef(summary(model4))[2,2]
beta + 1.96*c(-se,se)
```
```{r}
# regression: avg bins ~ bin treat + sms + pre-treat avg bins + street + no cell
model5 = lm(avg_bins_treat ~ bin + base_avg_bins_treat + street + nocell, data = d)
summary(model5)
# 95% CI
beta = coef(summary(model5))[2,1]
se = coef(summary(model5))[2,2]
beta + 1.96*c(-se,se)
model5 = lm(avg_bins_treat ~ bin + sms + base_avg_bins_treat + street + nocell, data = d)
summary(model5)
# 95% CI
beta = coef(summary(model5))[2,1]
se = coef(summary(model5))[2,2]
beta + 1.96*c(-se,se)
d$street = factor(d$street)
# regression: avg bins ~ bin treat + base avg bins + street
model3 = lm(avg_bins_treat ~ bin + base_avg_bins_treat + street, data = d)
summary(model3)
# 95% CI
beta = coef(summary(model3))[2,1]
se = coef(summary(model3))[2,2]
beta + 1.96*c(-se,se)
# regression: avg bins ~ bin treat + base avg bins
model2 = lm(avg_bins_treat ~ bin + base_avg_bins_treat, data = d)
summary(model2)
# 95% CI
beta = coef(summary(model2))[2,1]
se = coef(summary(model2))[2,2]
beta + 1.96*c(-se,se)
# regression: avg bins ~ bin treat + sms + pre-treat avg bins + street + no cell
model5 = lm(avg_bins_treat ~ bin + sms + base_avg_bins_treat + street + nocell, data = d)
summary(model5)
# 95% CI
beta = coef(summary(model5))[2,1]
se = coef(summary(model5))[2,2]
beta + 1.96*c(-se,se)
+ no cell
model6 = lm(avg_bins_treat ~ bin_s + bin_g + sms_p + sms_g + base_avg_bins_treat + street + nocell, data = d)
summary(model6)
# 95% CI
beta = coef(summary(model6))[2,1]
se = coef(summary(model6))[2,2]
beta + 1.96*c(-se,se)
View(d)
summary(complete.cases(d))
d = d[complete.cases(d),]
model1 = lm(avg_bins_treat ~ bin, data = d)
summary(model1)
# 95% CI
beta = coef(summary(model1))[2,1]
se = coef(summary(model1))[2,2]
beta + 1.96*c(-se,se)
# regression: avg bins ~ bin treat + base avg bins
model2 = lm(avg_bins_treat ~ bin + base_avg_bins_treat, data = d)
summary(model2)
# 95% CI
beta = coef(summary(model2))[2,1]
se = coef(summary(model2))[2,2]
beta + 1.96*c(-se,se)
d$street = factor(d$street)
# regression: avg bins ~ bin treat + base avg bins + street
model3 = lm(avg_bins_treat ~ bin + base_avg_bins_treat + street, data = d)
summary(model3)
# 95% CI
beta = coef(summary(model3))[2,1]
se = coef(summary(model3))[2,2]
beta + 1.96*c(-se,se)
d$nocell = 1 - d$havecell
# regression: avg bins ~ bin treat + pre-treat avg bins + street + no cell
model4 = lm(avg_bins_treat ~ bin + base_avg_bins_treat + street + nocell, data = d)
summary(model4)
# 95% CI
beta = coef(summary(model4))[2,1]
se = coef(summary(model4))[2,2]
beta + 1.96*c(-se,se)
# regression: avg bins ~ bin treat + sms + pre-treat avg bins + street + no cell
model5 = lm(avg_bins_treat ~ bin + sms + base_avg_bins_treat + street + nocell, data = d)
summary(model5)
# 95% CI
beta = coef(summary(model5))[2,1]
se = coef(summary(model5))[2,2]
beta + 1.96*c(-se,se)
# regression: avg bins ~ bin sticker + bin generic + sms personal + sms generic + pre-treat avg bins + street + no cell
model6 = lm(avg_bins_treat ~ bin_s + bin_g + sms_p + sms_g + base_avg_bins_treat + street + nocell, data = d)
summary(model6)
# 95% CI
beta = coef(summary(model6))[2,1]
se = coef(summary(model6))[2,2]
beta + 1.96*c(-se,se)
# regression: avg bins ~ bin sticker + bin generic + sms personal + sms generic + pre-treat avg bins + street + no cell
model6 = lm(avg_bins_treat ~ bin_s + bin_g + sms_p + sms_g + base_avg_bins_treat + street + nocell, data = d)
summary(model6)
# 95% CI
beta = coef(summary(model6))[3,1]
se = coef(summary(model6))[3,2]
beta + 1.96*c(-se,se)
sum(bin_s)
sum(d$bin_s)
sum(d$bin_g)
sum(d$bin)
View(d1)
sum(d$nocell)
sqrt(.022^2)
.022*sqrt((298^2+302^2)/600)
.022*sqrt((298^2+302^2)/600^2)
d <- read.csv(text = readURL("https://docs.google.com/spreadsheets/d/1k7A2-NXg7ISOJcwCiC8h44Y0_iZuys7_n1uwGBfR9GU/pub?gid=999367409&single=true&output=csv"))
d <- read.csv(text = getURL("https://docs.google.com/spreadsheets/d/1k7A2-NXg7ISOJcwCiC8h44Y0_iZuys7_n1uwGBfR9GU/pub?gid=999367409&single=true&output=csv"))
head(d)
model = lm(vomiting_day_14 ~ treat_zmapp)
model = lm(vomiting_day_14 ~ treat_zmapp, data = d)
model = lm(vomiting_day14 ~ treat_zmapp, data = d)
summary(model)
model2 = lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0)
model2 = lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0, data = d)
summary(model2)
dplyr::group_by(d,treat_zmapp) %>% summarise()
library(dplyr)
summarise(group_by(d,treat_zmapp))
dt = data.table(d)
dt[, ':=' (temp0 = sum(temperature_day0),)]
dt[, ':=' (temp0 = sum(temperature_day0), vomit0 = sum(vomiting_day0)), by=.(treat_zmapp)]
dt
summary(dt)
dt[, ':=' (temp0 = mean(temperature_day0), vomit0 = mean(vomiting_day0)), by=.(treat_zmapp)]
dt[, c('temp0','vomit0') := NULL]
dt[, ':=' (temp0 = mean(temperature_day0), vomit0 = mean(vomiting_day0)), by=.(treat_zmapp)]
summary(dt)
View(dt)
# regression: vomit day 14 ~ treat zmapp + vomit day 0 + patient temp day 0
model2 = lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0, data = d)
summary(model2)
summary(model1)
summary(model2)
dt[,.(avg.temp0 = mean(temperature_day0)), by=treat_zmapp]
dt[,.(avg.vomit0 = mean(vomiting_day0)), by=treat_zmapp]
View(dt)
model3 = lm(vomiting_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + temperature_day14, data = d)
summary(model3)
model4 = lm(temperature_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0, data = d)
summary(model4)
model4 = lm(temperature_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + male, data = d)
summary(model4)
model4 = lm(temperature_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + male*treat_zmapp, data = d)
summary(model4)
lm.coeff[2,1] + lm.coeff[6,1]
lm.coeff = coef(summary(model4))
lm.coeff[2,1] + lm.coeff[6,1]
dt[,.(treat.male = mean(male)), by=treat_zmapp]
lm.coeff = coef(summary(model4))
summary(model4)
lm.coeff[2,1] + 2*lm.coeff[2,2] + lm.coeff[6,1]
dt[,.(treat.male = mean(male)), by=treat_zmapp]
dt[,.(male.temp = mean(temperature_day0)), by=male]
dt[,.(treat.male = mean(male), treat.temp0  =mean(temperature_day0), treat.vomit0 = mean(vomiting_day0)), by=treat_zmapp]
summary(model1)
summary(model4)
model4 = lm(temperature_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + male + male*treat_zmapp, data = d)
summary(model4)
model4 = lm(temperature_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + male*treat_zmapp, data = d)
summary(model4)
model4a = lm(temperature_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + male*treat_zmapp, data = d)
summary(model4a)
model4a = lm(temperature_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0, data = d)
summary(model4a)
model4b = lm(temperature_day14 ~ treat_zmapp + vomiting_day0 + temperature_day0 + male*treat_zmapp, data = d)
summary(model4b)
knitr
library(knitr)
knitr
library(dplyr)
library(data.table)
# for Bernie Sanders
# - read files containing individual contribution, independent expenditure data
# read file header
dt.indivCon = data.table(read.csv(file = 'raw/bernie-sanders/indiv_contrib_2016-2y_bernie-sanders.csv',
nrows = 7, header = F, col.names = c('key','value'), stringsAsFactors = F))
setkey(dt.indivCon, key)
# save election year, candidate ID, candidate name
year = dt.indivCon['description', value]
cid = dt.indivCon['cmte_id', value]
cname = dt.indivCon['cmte_nm', value]
# read individual contribution data
dt.indivCon = data.table(read.csv(file = 'raw/bernie-sanders/indiv_contrib_2016-2y_bernie-sanders.csv',
skip = 7, header = T, stringsAsFactors = F))
n = nrow(dt.indivCon)
dt.indivCon[, ':=' (Candidate.Id = as.factor(rep(cid, n)),
Candidate.Name = as.factor(rep(cname, n)),
Year = as.integer(rep(year, n)))]
library(dplyr)
library(data.table)
# for Bernie Sanders
# - read files containing individual contribution, independent expenditure data
# read file header
dt.indivCon = data.table(read.csv(file = 'raw/bernie-sanders/indiv_contrib_2016-2y_bernie-sanders.csv',
nrows = 7, header = F, col.names = c('key','value'), stringsAsFactors = F))
setkey(dt.indivCon, key)
getwd()
setwd('/Users/winlin/Desktop/mids-w205-storing-retrieving-data/project/test/')
library(dplyr)
library(data.table)
# for Bernie Sanders
# - read files containing individual contribution, independent expenditure data
# read file header
dt.indivCon = data.table(read.csv(file = 'raw-data/bernie-sanders/indiv_contrib_2016-2y_bernie-sanders.csv',
nrows = 7, header = F, col.names = c('key','value'), stringsAsFactors = F))
setkey(dt.indivCon, key)
# save election year, candidate ID, candidate name
year = dt.indivCon['description', value]
cid = dt.indivCon['cmte_id', value]
cname = dt.indivCon['cmte_nm', value]
dt.indivCon = data.table(read.csv(file = 'raw-data/bernie-sanders/indiv_contrib_2016-2y_bernie-sanders.csv',
skip = 7, header = T, stringsAsFactors = F))
n = nrow(dt.indivCon)
dt.indivCon[, ':=' (Candidate.Id = as.factor(rep(cid, n)),
Candidate.Name = as.factor(rep(cname, n)),
Year = as.integer(rep(year, n)))]
summary(dt.indivContrib)
summary(dt.indivCon)
dt.indivCon[, ':=' (Candidate.Id = as.factor(rep(cid, n)),
Candidate.Name = as.factor(rep(cname, n)),
Year = as.factor(rep(year, n)))]
summary(dt.indivCon)
getwd()
write.csv(file = 'mod-data/ic20162y-bs.csv')
View(dt.indivCon)
write.table(file = 'mod-data/ind-con-2016-bs.csv', sep = ',')
write.table(dt.indivCon, file = 'mod-data/ind-con-2016-bs.csv', sep = ',')
# W205 Project
# Test Data Viz
library(dplyr)
library(data.table)
# for Bernie Sanders
# - read files containing individual contribution, independent expenditure data
# read file header and set key and col names
dt.indivCon = data.table(read.csv(file = 'raw-data/bernie-sanders/indiv_contrib_2016-2y_bernie-sanders.csv',
nrows = 7, header = F, col.names = c('key','value'), stringsAsFactors = F))
setkey(dt.indivCon, key)
# save election Year, Candidate.ID, Candidate.Name
year = dt.indivCon['description', value]
cid = dt.indivCon['cmte_id', value]
cname = dt.indivCon['cmte_nm', value]
# read individual contribution data
dt.indivCon = data.table(read.csv(file = 'raw-data/bernie-sanders/indiv_contrib_2016-2y_bernie-sanders.csv',
skip = 7, header = T, stringsAsFactors = F))
n = nrow(dt.indivCon)
summary(dt.indivCon)
# update records with Candidate.Id, Candidate.Name, Year
dt.indivCon[, ':=' (Candidate.Id = as.factor(rep(cid, n)),
Candidate.Name = as.factor(rep(cname, n)),
Election.Year = as.integer(rep(year, n)))]
summary(dt.indivCon)
# write result to CSV
write.table(dt.indivCon, file = 'mod-data/ind-con-2016-bs.csv', sep = ',')
# - transform data
#       - clean special chars
#       - populate can_id column
#       - create views grouping contributions by source, interest, industry, geography
# - write data to Excel workbook so we can blend in Tableau
